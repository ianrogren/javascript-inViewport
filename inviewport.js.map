{"version":3,"sources":["source/inviewport.js"],"names":[],"mappings":";;;;;;;AAAA;;;;;;AAMA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;AAEA,MAAM,CAAC,SAAP,CAAiB,UAAjB,GAA8B,SAAS,UAAT,CAC5B,MAD4B,EAE5B,MAF4B,EAI5B;AAAA,MADA,IACA,uEADO,YACP;;AACA;;;AAGA,MAAM,aAAa,GAAG,SAAhB,aAAgB,GAAM;AAC1B,QAAI,KAAK,GAAG,KAAZ;;AACA,QAAI,MAAM,KAAK,WAAf,EAA4B;AAC1B,MAAA,OAAO,CAAC,KAAR,CAAc,oCAAd;AACA,MAAA,KAAK,GAAG,IAAR;AACD;;AACD,WAAO,KAAP;AACD,GAPD;;AASA,MAAM,QAAQ,GAAG;AACf,IAAA,GAAG,EAAE,MAAM,CAAC,WADG;AAEf,IAAA,IAAI,EAAE,MAAM,CAAC,WAFE;AAGf,IAAA,MAAM,EAAE,MAAM,CAAC,WAAP,GAAqB,MAAM,CAAC,WAHrB;AAIf,IAAA,KAAK,EAAE,MAAM,CAAC,WAAP,GAAqB,MAAM,CAAC;AAJpB,GAAjB;AAOA,MAAM,MAAM,GAAG,KAAK,qBAAL,EAAf;AAEA,MAAM,OAAO,GAAG;AACd,IAAA,GAAG,EAAE,MAAM,CAAC,GAAP,IAAc,CAAd,IAAmB,MAAM,CAAC,GAAP,GAAa,MAAM,CAAC,WAD9B;AAEd,IAAA,MAAM,EAAE,MAAM,CAAC,MAAP,GAAgB,CAAhB,IAAqB,MAAM,CAAC,MAAP,IAAiB,MAAM,CAAC,WAFvC;AAGd,IAAA,IAAI,EAAE,MAAM,CAAC,IAAP,IAAe,CAAf,IAAoB,MAAM,CAAC,IAAP,GAAc,MAAM,CAAC,UAHjC;AAId,IAAA,KAAK,EAAE,MAAM,CAAC,KAAP,GAAe,CAAf,IAAoB,MAAM,CAAC,KAAP,IAAgB,MAAM,CAAC;AAJpC,GAAhB;AAOA;;;;;;;;;;;AAUA,MAAM,kBAAkB,GAAG,SAArB,kBAAqB,CAAC,SAAD,EAAY,YAAZ,EAA0B,IAA1B,EAAmC;AAC5D,QAAM,SAAS,GAAG,MAAM,CAAC,WAAP,GAAqB,MAAM,CAAC,GAA9C;AACA,QAAI,eAAe,GAAG,CAAtB;AACA,QAAI,kBAAkB,GAAG,CAAzB;AAEA;;;;;AAIA,QACG,SAAS,KAAK,IAAd,IAAsB,YAAY,KAAK,IAAxC,IACC,SAAS,IAAI,IAAI,CAAC,GAAlB,IAAyB,IAAI,CAAC,MAAL,IAAe,SAAS,GAAG,MAAM,CAAC,MAF9D,EAGE;AACA,aAAO,IAAP;AACD;;AAED,QAAI,SAAS,IAAI,CAAC,YAAlB,EAAgC;AAC9B,MAAA,eAAe,GAAG,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,GAAP,GAAa,MAAM,CAAC,WAA7B,CAAlB;AACA,MAAA,kBAAkB,GAAG,IAAI,CAAC,GAAL,CACnB,CAAC,MAAM,CAAC,GAAP,GAAa,MAAM,CAAC,WAArB,IAAoC,MAAM,CAAC,MADxB,CAArB;AAGD,KALD,MAKO,IAAI,CAAC,SAAD,IAAc,YAAlB,EAAgC;AACrC,MAAA,eAAe,GAAG,aAAa,CAAC,MAAhC;AACA,MAAA,kBAAkB,GAAG,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,MAAP,GAAgB,MAAM,CAAC,MAAhC,CAArB;AACD;;AAED,QACG,kBAAkB,IAAI,MAAtB,IAAgC,IAAI,KAAK,YAA1C,IACC,eAAe,IAAI,MAAnB,IAA6B,IAAI,KAAK,OAFzC,EAGE;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GAjCD;AAmCA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;AAGA,MAAM,aAAa,GAAG,SAAhB,aAAgB,GAAM;AAC1B,QAAI,OAAO,GAAG,CAAd;;AAEA,QAAI,OAAO,CAAC,GAAR,IAAe,CAAC,OAAO,CAAC,MAA5B,EAAoC;AAClC,MAAA,OAAO,GACL,IAAI,KAAK,OAAT,GACI,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,GAAP,GAAa,MAAM,CAAC,WAA7B,CADJ,GAEI,IAAI,CAAC,GAAL,CAAS,CAAC,MAAM,CAAC,GAAP,GAAa,MAAM,CAAC,WAArB,IAAoC,MAAM,CAAC,MAApD,CAHN;AAID,KALD,MAKO,IAAI,CAAC,OAAO,CAAC,GAAT,IAAgB,OAAO,CAAC,MAA5B,EAAoC;AACzC,MAAA,OAAO,GACL,IAAI,KAAK,OAAT,GACI,MAAM,CAAC,MADX,GAEI,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,MAAP,GAAgB,MAAM,CAAC,MAAhC,CAHN;AAID;;AAED,WAAO,OAAO,IAAI,MAAlB;AACD,GAhBD;AAkBA;;;;;;;;;;;;;AAWA,MAAM,eAAe,GAAG,SAAlB,eAAkB,GAAM;AAC5B,WAAO,KAAP;AACD,GAFD;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAM,kBAAkB,GAAG,SAArB,kBAAqB,CAAC,UAAD,EAAgB;AAAA,QACjC,KADiC,GACoB,UADpB,CACjC,KADiC;AAAA,QAC1B,KAD0B,GACoB,UADpB,CAC1B,KAD0B;AAAA,QACnB,YADmB,GACoB,UADpB,CACnB,YADmB;AAAA,QACL,oBADK,GACoB,UADpB,CACL,oBADK;AAGzC,QAAI,aAAa,GAAG,CAApB;AAEA;;;;;AAIA,QACG,OAAO,CAAC,KAAD,CAAP,IAAkB,OAAO,CAAC,KAAD,CAA1B,IACC,YAAY,IAAI,QAAQ,CAAC,KAAD,CAAxB,IACC,QAAQ,CAAC,KAAD,CAAR,IAAmB,YAAY,GAAG,MAAM,CAAC,oBAAD,CAH5C,EAIE;AACA,aAAO,IAAP;AACD;;AAED,IAAA,aAAa,GACX,oBAAoB,KAAK,QAAzB,GACI,aAAa,CAAC,UAAD,CADjB,GAEI,eAAe,CAAC,UAAD,CAHrB;AAKA,WAAO,aAAP,CAtByC,CAwBzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACD,GAlDD;AAoDA;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,MAAM,QAAQ,GAAG,SAAX,QAAW,GAAM;AACrB,QAAM,UAAU,GAAG,aAAa,EAAhC;;AACA,QAAI,UAAJ,EAAgB;AACd,aAAO,KAAP;AACD;;AAED,QAAM,kBAAkB,GAAG;AACzB,MAAA,KAAK,EAAE,KADkB;AAEzB,MAAA,KAAK,EAAE,QAFkB;AAGzB,MAAA,YAAY,EAAE,MAAM,CAAC,WAAP,GAAqB,MAAM,CAAC,GAHjB;AAIzB,MAAA,cAAc,EAAE,MAJS;AAKzB,MAAA,oBAAoB,EAAE;AALG,KAA3B;AAOA,QAAM,gBAAgB,GAAG,kBAAkB,CAAC,kBAAD,CAA3C;;AAEA,QAAI,CAAC,gBAAL,EAAuB;AACrB,aAAO,KAAP;AACD,KAjBoB,CAmBrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAAO,IAAP;AACD,GApCD;;AAsCA,SAAO,QAAQ,EAAf;AACD,CAzTD;;AA2TA,IAAM,UAAU,GAAG,MAAM,CAAC,SAAP,CAAiB,UAApC;eACe,U","file":"inviewport.js","sourcesContent":["/**\n * javascript-inViewport.\n *\n * @format\n */\n\n/* eslint-env es5 */\n/* eslint no-undef: 0 */\n/* eslint no-var: 0 */\n/* eslint no-console: 0 */\n/* eslint comma-dangle: 0 */\n/* eslint no-extend-native: [\"error\", { \"exceptions\": [\"Object\"] }] */\n/* eslint-disable prefer-destructuring */\n\nObject.prototype.inViewport = function inViewport(\n  xValue,\n  yValue,\n  type = 'percentage'\n) {\n  /**\n   * Error Handling.\n   */\n  const errorHandling = () => {\n    let error = false;\n    if (window === 'undefined') {\n      console.error('inViewport: no window object found');\n      error = true;\n    }\n    return error;\n  };\n\n  const viewport = {\n    top: window.pageYOffset,\n    left: window.pageXOffset,\n    bottom: window.pageYOffset + window.innerHeight,\n    right: window.pageXOffset + window.innerWidth,\n  };\n\n  const bounds = this.getBoundingClientRect();\n\n  const visible = {\n    top: bounds.top >= 0 && bounds.top < window.innerHeight,\n    bottom: bounds.bottom > 0 && bounds.bottom <= window.innerHeight,\n    left: bounds.left >= 0 && bounds.left < window.innerWidth,\n    right: bounds.right > 0 && bounds.right <= window.innerWidth,\n  };\n\n  /**\n   * Vertical Visibility\n   *\n   * @param array elementBounds\n   * @param boolean topBounds\n   * @param boolean bottomBounds\n   * @param string view\n   *\n   * @return boolean\n   */\n  const verticalVisibility = (topBounds, bottomBounds, view) => {\n    const yPosition = window.pageYOffset + bounds.top;\n    let verticalShowing = 0;\n    let verticalPercentage = 0;\n\n    /**\n     * Return true if element is completely visible or if the element is too\n     * big for the viewport.\n     */\n    if (\n      (topBounds === true && bottomBounds === true) ||\n      (yPosition <= view.top && view.bottom <= yPosition + bounds.height)\n    ) {\n      return true;\n    }\n\n    if (topBounds && !bottomBounds) {\n      verticalShowing = Math.abs(bounds.top - window.innerHeight);\n      verticalPercentage = Math.abs(\n        (bounds.top - window.innerHeight) / bounds.height\n      );\n    } else if (!topBounds && bottomBounds) {\n      verticalShowing = elementBounds.bottom;\n      verticalPercentage = Math.abs(bounds.bottom / bounds.height);\n    }\n\n    if (\n      (verticalPercentage >= yValue && type === 'percentage') ||\n      (verticalShowing >= yValue && type === 'pixel')\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Horizontal Visibility\n   *\n   * @param array elementBounds\n   * @param boolean rightBounds\n   * @param boolean leftBounds\n   * @param string view\n   *\n   * @return boolean\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   */\n  // const horizontalVisibility = (elementBounds, view) => {\n  //   var xPosition = window.pageXOffset + elementBounds.left;\n  //   var horizontalShowing = 0;\n  //   var horizontalPercentage = 0;\n\n  //   // Get the percentage of the element showing horizontally\n  //   if (visible.right && !visible.left) {\n  //     horizontalShowing = elementBounds.right;\n  //     horizontalPercentage = Math.abs(\n  //       elementBounds.right / elementBounds.width\n  //     );\n  //   } else if (!visible.right && visible.left) {\n  //     horizontalShowing = Math.abs(viewport.right - elementBounds.left);\n  //     horizontalPercentage = Math.abs(\n  //       (viewport.right - elementBounds.left) / elementBounds.width\n  //     );\n  //   } else if (visible.right && visible.left) {\n  //     return true;\n  //   }\n\n  //   // Check to see if the element is in the viewport but\n  //   // the width takes up the whole screen\n  //   if (\n  //     xPosition <= view.left &&\n  //     view.right <= xPosition + elementBounds.width\n  //   ) {\n  //     return true;\n  //   }\n\n  //   if (\n  //     (horizontalPercentage >= yValue && type === 'percentage') ||\n  //     (horizontalShowing >= yValue && type === 'pixel')\n  //   ) {\n  //     return true;\n  //   }\n  //   return false;\n  // };\n\n  /**\n   * Vertical Check.\n   */\n  const verticalCheck = () => {\n    let element = 0;\n\n    if (visible.top && !visible.bottom) {\n      element =\n        type === 'pixel'\n          ? Math.abs(bounds.top - window.innerHeight)\n          : Math.abs((bounds.top - window.innerHeight) / bounds.height);\n    } else if (!visible.top && visible.bottom) {\n      element =\n        type === 'pixel'\n          ? bounds.bottom\n          : Math.abs(bounds.bottom / bounds.height);\n    }\n\n    return element >= yValue;\n  };\n\n  /**\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   */\n  const horizontalCheck = () => {\n    return false;\n  };\n\n  /**\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   * Element Bounds Check.\n   *\n   * @param {object} boundCheck\n   */\n  const elementBoundsCheck = (boundaries) => {\n    const { sideA, sideB, viewPosition, measurementDirection } = boundaries;\n\n    let objectVisible = 0;\n\n    /**\n     * Return true if element is completely visible or if the element is too\n     * big for the viewport.\n     */\n    if (\n      (visible[sideA] && visible[sideB]) ||\n      (viewPosition <= viewport[sideA] &&\n        viewport[sideB] <= viewPosition + bounds[measurementDirection])\n    ) {\n      return true;\n    }\n\n    objectVisible =\n      measurementDirection === 'height'\n        ? verticalCheck(boundaries)\n        : horizontalCheck(boundaries);\n\n    return objectVisible;\n\n    // if (visible[sideA] && !visible[sideB]) {\n    //   pixelVisible = Math.abs(viewport[sideA] - bounds[sideB]);\n    //   percentVisible = Math.abs(\n    //     (bounds[sideA] - window.innerHeight) / bounds[measurementDirection]\n    //   );\n    // } else if (!visible[sideA] && visible[sideB]) {\n    //   pixelVisible = bounds[sideB];\n    //   percentVisible = Math.abs(bounds[sideB] / bounds.height);\n    // }\n\n    // const pixelVisible =\n    //   visible[sideA] && !visible[sideB]\n    //     ? bounds[sideA]\n    //     : Math.abs(viewport[sideA] - bounds[sideB]);\n\n    // const percentageVisible =\n    //   visible[sideA] && !visible[sideB]\n    //     ? Math.abs(bounds[sideA] / bounds.width)\n    //     : Math.abs((viewport.right - bounds[sideB]) / bounds.width);\n\n    // console.log('pixel visible', pixelVisible);\n    // console.log('window position', windowPosition);\n\n    // const elementVisible = type === 'pixel' ? pixelVisible : percentageVisible;\n\n    // return elementVisible >= windowPosition;\n  };\n\n  /**\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   *\n   * Is In View.\n   */\n  const isInView = () => {\n    const errorFound = errorHandling();\n    if (errorFound) {\n      return false;\n    }\n\n    const verticalBoundaries = {\n      sideA: 'top',\n      sideB: 'bottom',\n      viewPosition: window.pageYOffset + bounds.top,\n      windowPosition: yValue,\n      measurementDirection: 'height',\n    };\n    const verticalPosition = elementBoundsCheck(verticalBoundaries);\n\n    if (!verticalPosition) {\n      return false;\n    }\n\n    // const horizontalBoundaries = {\n    //   sideA: 'right',\n    //   sideB: 'left',\n    //   viewPosition: window.pageXOffset + bounds.left,\n    //   windowPosition: xValue,\n    //   measurementDirection: 'width',\n    // };\n    // const horizontalPosition = elementBoundsCheck(horizontalBoundaries);\n    // console.log('horizontal:', horizontalPosition);\n\n    // if (\n    //   !horizontalVisibility(bounds, viewport) ||\n    //   !verticalVisibility(visible.top, visible.bottom, viewport)\n    // ) {\n    //   return false;\n    // }\n    return true;\n  };\n\n  return isInView();\n};\n\nconst inViewport = Object.prototype.inViewport;\nexport default inViewport;\n"]}