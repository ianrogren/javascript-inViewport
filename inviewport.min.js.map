{"version":3,"sources":["source/inviewport.js"],"names":[],"mappings":"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","file":"inviewport.min.js","sourcesContent":["/**\n * javascript-inViewport.\n *\n * @format\n */\n\n/* eslint-env es5 */\n/* eslint no-undef: 0 */\n/* eslint no-var: 0 */\n/* eslint no-console: 0 */\n/* eslint comma-dangle: 0 */\n/* eslint no-extend-native: [\"error\", { \"exceptions\": [\"Object\"] }] */\n/* eslint-disable prefer-destructuring */\n\nObject.prototype.inViewport = function inViewport(\n  xValue,\n  yValue,\n  callback,\n  intervalSpeed,\n  options = { type: 'percentage', debug: false }\n) {\n  const { type, debug } = options;\n  let isVisible = false;\n  let inView = false;\n  let scrolling = false;\n  let scrollListener = null;\n\n  /**\n   * Set Scroll.\n   */\n  function setScroll() {\n    scrolling = true;\n  }\n\n  /**\n   * Error Handling.\n   */\n  const errorHandling = () => {\n    let error = false;\n    if (window === 'undefined') {\n      console.error('inViewport: no window object found');\n      error = true;\n    }\n    return error;\n  };\n\n  /**\n   * Debug Mode.\n   */\n  const debugMode = (bounds, visible, viewport) => {\n    const headingStyle =\n      'font-weight: bold; font-size: 14px; margin-bottom: 10px';\n    console.clear();\n    console.log('%cElement bounds: \\n', headingStyle, bounds, '\\n\\n');\n    console.log('%cSide visibility: \\n', headingStyle, visible, '\\n\\n');\n    console.log('%cViewport: \\n', headingStyle, viewport, '\\n\\n');\n    console.log(\n      '%cWindow & variabele checks:',\n      headingStyle,\n      '\\n\\tWidth: ',\n      window.innerWidth,\n      '\\n\\tHeight: ',\n      window.innerHeight,\n      '\\n\\tLeft offset: ',\n      window.pageXOffset\n    );\n  };\n\n  /**\n   * Vertical Check.\n   */\n  const verticalCheck = (boundaries) => {\n    const { visible, bounds } = boundaries;\n    let element = 0;\n\n    if (visible.top && !visible.bottom) {\n      element =\n        type === 'pixel'\n          ? Math.abs(bounds.top - window.innerHeight)\n          : Math.abs((bounds.top - window.innerHeight) / bounds.height);\n      if (debug) {\n        console.log('\\tTop visible: ', element);\n      }\n    } else if (!visible.top && visible.bottom) {\n      element =\n        type === 'pixel'\n          ? bounds.bottom\n          : Math.abs(bounds.bottom / bounds.height);\n      if (debug) {\n        console.log('\\tBottom visible: ', element);\n      }\n    }\n\n    return element >= yValue;\n  };\n\n  /**\n   * Horizontal Check.\n   */\n  const horizontalCheck = (boundaries) => {\n    const { visible, bounds } = boundaries;\n    let element = 0;\n\n    if (visible.left && !visible.right) {\n      element =\n        type === 'pixel'\n          ? Math.abs(bounds.left - window.innerWidth)\n          : Math.abs((bounds.left - window.innerWidth) / bounds.width);\n      if (debug) {\n        console.log('\\tLeft visible: ', element);\n      }\n    } else if (!visible.left && visible.right) {\n      element =\n        type === 'pixel' ? bounds.right : Math.abs(bounds.right / bounds.width);\n\n      if (debug) {\n        console.log('\\tRight visible: ', element);\n      }\n    }\n    return element >= xValue;\n  };\n\n  /**\n   * Element Bounds Check.\n   *\n   * @param {object} boundCheck\n   */\n  const elementBoundsCheck = (boundaries) => {\n    const { sideA, sideB, measurementDirection, visible, bounds } = boundaries;\n    let objectVisible = 0;\n\n    /**\n     * Return true if element is completely visible or if the element is too\n     * big for the viewport.\n     */\n    if (\n      (visible[sideA] && visible[sideB]) ||\n      (bounds.top < 0 && bounds.bottom > window.innerHeight) ||\n      (bounds.left < 0 && bounds.right > window.innerWidth)\n    ) {\n      if (debug) {\n        if (visible[sideA] && visible[sideB]) {\n          console.log(\n            `\\tElement ${measurementDirection.trim()}: completely visible.`\n          );\n        } else {\n          console.log(\n            `\\tElement ${measurementDirection.trim()}: too big for window.`\n          );\n        }\n      }\n\n      return true;\n    }\n\n    objectVisible =\n      measurementDirection === 'height'\n        ? verticalCheck(boundaries)\n        : horizontalCheck(boundaries);\n\n    return objectVisible;\n  };\n\n  /**\n   * Callback.\n   *\n   * @param {boolean} inView\n   */\n  const checkCallback = () => {\n    if (inView && !isVisible) {\n      if (Array.isArray(callback)) {\n        callback[0]();\n      } else {\n        callback();\n        window.removeEventListener('scroll', setScroll, false);\n        clearInterval(scrollListener);\n\n        if (debug) {\n          console.log('Scroll interval cleared and removed window scroll');\n        }\n      }\n    } else if (!inView && isVisible) {\n      if (Array.isArray(callback)) {\n        callback[1]();\n      }\n    }\n  };\n\n  /**\n   * Is In View.\n   */\n  const isInView = () => {\n    const errorFound = errorHandling();\n    if (errorFound) {\n      return false;\n    }\n\n    const bounds = this.getBoundingClientRect();\n\n    const viewport = {\n      top: window.pageYOffset,\n      left: window.pageXOffset,\n      bottom: window.pageYOffset + window.innerHeight,\n      right: window.pageXOffset + window.innerWidth,\n    };\n\n    const visible = {\n      top: bounds.top >= 0 && bounds.top < window.innerHeight,\n      bottom: bounds.bottom > 0 && bounds.bottom <= window.innerHeight,\n      left: bounds.left >= 0 && bounds.left < window.innerWidth,\n      right: bounds.right >= 0 && bounds.right <= window.innerWidth,\n    };\n\n    const verticalBoundaries = {\n      sideA: 'top',\n      sideB: 'bottom',\n      measurementDirection: 'height',\n      visible,\n      viewport,\n      bounds,\n    };\n\n    const horizontalBoundaries = {\n      sideA: 'right',\n      sideB: 'left',\n      measurementDirection: 'width',\n      visible,\n      viewport,\n      bounds,\n    };\n\n    if (debug) {\n      debugMode(bounds, visible, viewport);\n    }\n\n    inView =\n      elementBoundsCheck(verticalBoundaries) &&\n      elementBoundsCheck(horizontalBoundaries);\n\n    checkCallback();\n\n    return inView;\n  };\n  isInView();\n\n  /**\n   * Boundary Listener.\n   */\n  const addBoundaryListener = () => {\n    window.addEventListener('scroll', setScroll, false);\n    scrollListener = setInterval(() => {\n      if (scrolling) {\n        isVisible = isInView();\n        scrolling = false;\n      }\n    }, intervalSpeed);\n  };\n  addBoundaryListener();\n};\n\nconst inViewport = Object.prototype.inViewport;\nexport default inViewport;\n"]}